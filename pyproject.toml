[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "patternlab"
version = "0.1.0"
description = "Binary pattern analysis framework"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
authors = [
    {name = "PatternLab Team"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "click>=8.0.0",
    "numpy>=1.25.0",
    "scipy>=1.10.0",
    # Format-analysis helpers
    "python-magic>=0.4.27",
    "pefile>=2024.2.1",
    "oletools>=0.63.0",
    # Crypto helpers used by new plugins
    "cryptography>=41.0.0",
    "pycryptodome>=3.18.0",
    # Optional ML dependencies for anomaly detection plugins (recommended extras 'ml')
    # Note: these are heavy; kept as optional extras to avoid forcing installs for all users.
]

[project.optional-dependencies]
test = [
    "pytest>=7.0.0",
]
ml = [
    "tensorflow>=2.12.0 ; platform_system != 'Windows' or python_version >= '3.10'",
    "tensorflow-cpu>=2.12.0 ; platform_system == 'Windows' and python_version >= '3.10'",
    "scikit-learn>=1.2.0",
    "joblib>=1.2.0",
    "pandas>=2.0.0",
    "tensorflow-io>=0.32.0 ; python_version >= '3.10'",
]

[project.scripts]
patternlab = "patternlab.cli:cli"


[project.entry-points."patternlab.plugins"]
# Auto-generated: map all discovered plugin modules -> their export symbols
# Selection rules used:
#  - Prefer explicit well-known export/class names when present (ENTRY_POINT, PLUGIN, Plugin, make_plugin, load_plugin)
#  - Otherwise use the single TestPlugin/VisualPlugin-derived class defined in the module.
# Notes:
#  - patternlab.plugins.parallel_helpers defines two test classes; both are registered intentionally.
approximate_entropy = "patternlab.plugins.approximate_entropy:ApproximateEntropyTest"
autocorrelation = "patternlab.plugins.autocorrelation:AutocorrelationTest"
binary_matrix_rank = "patternlab.plugins.binary_matrix_rank:BinaryMatrixRankTest"
block_frequency = "patternlab.plugins.block_frequency_test:BlockFrequencyTest"
cusum = "patternlab.plugins.cusum:CumulativeSumsTest"
dotplot = "patternlab.plugins.dotplot:DotplotTest"
fft_placeholder = "patternlab.plugins.fft_placeholder:FFTPlaceholder"
fft_spectral = "patternlab.plugins.fft_spectral:FFTSpectralTest"
linear_complexity = "patternlab.plugins.linear_complexity:LinearComplexityTest"
longest_run = "patternlab.plugins.longest_run:LongestRunOnesTest"
lz_complexity = "patternlab.plugins.lz_complexity:LZComplexityTest"
maurers_universal = "patternlab.plugins.maurers_universal:MaurersUniversalTest"
monobit = "patternlab.plugins.monobit:MonobitTest"
nist_dft_spectral = "patternlab.plugins.nist_dft_spectral:NISTDFTSpectralTest"
non_overlapping_template_matching = "patternlab.plugins.non_overlapping_template_matching:NonOverlappingTemplateMatching"
overlapping_template_matching = "patternlab.plugins.overlapping_template_matching:OverlappingTemplateMatching"
random_excursions_variant = "patternlab.plugins.random_excursions_variant:RandomExcursionsVariantTest"
random_excursions = "patternlab.plugins.random_excursions:RandomExcursionsTest"
runs = "patternlab.plugins.runs_test:RunsTest"
serial = "patternlab.plugins.serial_test:SerialTest"
vigenere = "patternlab.plugins.vigenere:VigenerePlugin"
xor_const = "patternlab.plugins.xor_const:XOPlugin"
# parallel_helpers exposes two TestPlugin implementations used in tests; keep both entry points.
parallel_quick_stat = "patternlab.plugins.parallel_helpers:QuickStat"
parallel_blocking = "patternlab.plugins.parallel_helpers:BlockingTest"
# New advanced statistical test plugins (Dieharder, TestU01, spectral adv, Hurst)
diehard_birthday_spacings = "patternlab.plugins.diehard_birthday_spacings:BirthdaySpacingsTest"
diehard_overlapping_sums = "patternlab.plugins.diehard_overlapping_sums:OverlappingSumsTest"
diehard_3d_spheres = "patternlab.plugins.diehard_3d_spheres:ThreeDSpheresTest"
testu01_smallcrush = "patternlab.plugins.testu01_smallcrush:SmallCrushAdapter"
dft_spectral_advanced = "patternlab.plugins.dft_spectral_advanced:DFTSpectralAdvancedTest"
hurst_exponent = "patternlab.plugins.hurst_exponent:HurstExponentTest"
conditional_entropy = "patternlab.plugins.conditional_entropy:ConditionalEntropyTest"
mutual_information = "patternlab.plugins.mutual_information:MutualInformationTest"
transfer_entropy = "patternlab.plugins.transfer_entropy:TransferEntropyTest"
# Machine-learning based anomaly detection plugins (LSTM/GRU, Autoencoder, Classifier labeler)
lstm_gru_anomaly = "patternlab.plugins.lstm_gru_anomaly:LSTMGRUAnomalyPlugin"
autoencoder_anomaly = "patternlab.plugins.autoencoder_anomaly:AutoencoderAnomalyPlugin"
classifier_labeler = "patternlab.plugins.classifier_labeler:ClassifierLabelerPlugin"
# Structural/format analysis plugins added by integration
magic_detector = "patternlab.plugins.magic_detector:MagicDetector"
png_structure = "patternlab.plugins.png_structure:PNGStructure"
zip_structure = "patternlab.plugins.zip_structure:ZIPStructure"
pdf_structure = "patternlab.plugins.pdf_structure:PDFStructure"
# Crypto analysis plugins integrated: ECB detection, frequency/pattern, known constants/S-box search
ecb_detector = "patternlab.plugins.ecb_detector:ECBDetector"
frequency_pattern = "patternlab.plugins.frequency_pattern:FrequencyPattern"
known_constants_search = "patternlab.plugins.known_constants_search:KnownConstantsSearch"
[project.urls]
Homepage = "https://github.com/example/patternlab"
Repository = "https://github.com/example/patternlab.git"
Issues = "https://github.com/example/patternlab/issues"

[tool.setuptools.packages.find]
where = ["."]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v"